services:
  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: scan
      POSTGRES_PASSWORD: scan
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
    ports:
      - "5432:5432"
    expose:
      - 5432
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U scan" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - postgres
    restart: unless-stopped
  user-service:
    image: 'ses-spring-boot-image'
    ports:
      - target: 8083
        published: 8083
        protocol: tcp
    expose:
      - 8083
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      DB_HOST: 'postgres'
      DB_PORT: 5432
      DB_DATABASE: 'scan'
      DB_USERNAME: scan
      DB_PASSWORD: scan
    networks:
      - postgres
      - user-service
  python-service:
    image: flask-middleware
    ports:
      - target: 5000
        published: 5000
        protocol: tcp
    expose:
      - 5000
    volumes:
      - .:/code
    depends_on:
      - user-service
    networks:
      - user-service
    environment:
      USER_SERVICE_URL: http://user-service:8083/api/v1/user
  angular-frontend:
    image: angular-frontend
    ports:
      - target: 4200
        published: 4200
        protocol: tcp
    depends_on:
      - user-service
      - python-service
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-pgadmin4@pgadmin.org}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin:/var/lib/pgadmin
    ports:
      - "5050:80"
    networks:
      - postgres
    restart: unless-stopped
networks:
  postgres:
    driver: bridge
  user-service:
    driver: bridge

volumes:
  postgres:
  pgadmin: